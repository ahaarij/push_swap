#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

typedef struct s_stacks
{
    int     *a;
    int     *b;
    int     a_size;
    int     b_size;
    char    *join_args;
}           t_stacks;




void    free_and_exit_msg(t_stacks *s, char *msg)
{
    if (msg)
        write(2, msg, ft_strlen(msg));
    if (s != NULL)
    {
        if (s->a != NULL)
			free(s->a);
		if (s->b != NULL)
			free(s->b);
		if (s->join_args != NULL)
			free(s->join_args);
		if (s != NULL)
			free(s);
    }
    exit (0);
}


static void validate_args(int argc, char **argv)
{
    int i;
    int j;

    i = 0;
    if (argc < 2)
        free_and_exit_msg(NULL, "");
    while (++i < argc)
    {
        j = 0;
        if(!argv[i][0] || (argv[i][0] && argv[i][0] == ' '))
            free_and_exit_msg(NULL, "Error\n");
        while(argv[i][j] != '\0')
        {
            if ((!(ft_isdigit(argv[i][j])) && (argv[i][j] != ' ')
			&& (argv[i][j] != '-' && argv[i][j] != '+' && argv[i][j] != ' '))
			|| (argv[i][j] == '-' && argv[i][j + 1] == '\0')
			|| (argv[i][j] == '+' && argv[i][j + 1] == '\0')
			|| (argv[i][j] == '-' && argv[i][j + 1] == ' ')
			|| (argv[i][j] == '+' && argv[i][j + 1] == ' '))
				free_and_exit_msg(NULL, "Error\n");
            j++;
        }
    }
}

static void join_args(int argc, char **argv, t_stacks *s)
{
    char	*temp;
	char	*temp2;
	int		i;

	i = 0;
	temp2 = ft_strdup("");
	while(++i < argc && argv[i] != NULL)
	{
		temp = ft_strjoin(temp2, argv[i]);
		if (temp2)
			free(temp2);
		if (i != argc - 1)
		{
			temp2 = ft_strjoin(temp, " ");
			if (temp)
				free(temp);
			temp = temp2;
		}
	}
	s->join_args = ft_strdup(temp);
	if (s->join_args == NULL)
		free_and_exit_msg(s, "Error\n");
	if (temp)
		free(temp);
}


int main(int argc, char **argv)
{
    t_stacks	*s;
    
    validate_args(argc, argv);
    s = malloc(sizeof * s);
    if (s == NULL)
        exit (1);
    initialize_stacks(argc, argv, s);
    join_args(argc, argv, s);
	parse_numbers(s);
	exit_if_dupes_or_sorted(s, 0);
	create_index(s);
	if (s->a_size == 2 && s->a[0] > s->a[1])
		swap("sa", s->a, s->a_size);
	else if (s->a_size == 3)
		sort_three_elements(s);
	else if (s->a_size >= 4 && s->a_size <= 5)
		sort_four_to_five_elements(s);
	else
		radix_sort(s);
	exit_if_dupes_or_sorted(s, 1);
	free_and_exit_msg(s, "Error\n");
	return (0);
}


void	swap(char *str, int *arr, int size)
{
	int	temp;
	
	if (size <= 0)
		return ;
	temp = arr[0];
	arr[0] = arr[1];
	arr[1] = temp;
	ft_putendl_fd(str, 1);
}

void	rotate(int *array, int size, char *direction, char *list)
{
	int	temp;
	
	if (size < 0)
		return ;
	if (ft_strncmp(direction, "up", 5) == 0)
	{
		temp = array[0];
		ft_memmove(array, array + 1, sizeof(int) * (size - 1));
		array[size - 1] = temp;
		write(1, "r", 1);
	}
	else if (ft_strncmp(direction, "down", 5) == 0)
	{
		temp = array[size - 1];
		ft_memmove(array + 1, array, sizeof(int) * (size - 1));
		array[0] = temp;
		write(1, "rr", 2);
	}
	ft_putendl_fd(list, 1);
}

void	push(char *str, t_stacks *s)
{
	int	temp;
	
	if(ft_strncmp(str, "pa", 3) == 0)
	{
		if (s->b_size <= 0)
			return ;
		temp = s->b[0];
		ft_memmove(s->a + 1, s->a, sizeof(int) * s->a_size);
		s->a[0] = temp;
		s->b_size--;
		ft_memmove(s->b, s->b + 1, sizeof(int) * s->b_size);
		s->a_size++;
	}
	else if(ft_strncmp(str, "pb", 3) == 0)
	{
		if (s->a_size <= 0)
			return ;
		temp = s->a[0];
		ft_memmove(s->b + 1, s->b, sizeof(int) * s->b_size);
		s->b[0] = temp;
		s->a_size--;
		ft_memmove(s->a, s->a + 1, sizeof(int) * s->a_size);
		s->b_size++;
	}
	ft_putendl_fd(str, 1);
}


int	is_array_sorted(t_stacks *s)
{
	int	i;

	i = 0;
	while (i < s->a_size - 1)
	{
		if(s->a[i] > s->a[i + 1])
			return (0);
		i++;
	}
	return (1);
}


void	sort_three_elements(t_stacks *s)
{
	if (s->a[2] != 2)
	{
		if (s->a[0] == 2)
			rotate(s->a, s->a_size, "up", "a");
		else
			rotate(s->a, s->a_size, "down", "a");
	}
	if (s->a[0] > s->a[1])
		swap("sa", s->a, s->a_size);
}

void	sort_four_to_five_elements(t_stacks *s)
{
	while (s->b_size <= 1)
	{
		if (s->a[0] == 0 || s->a[0] == 1){
			push("pb", s);
		}
		else{
			rotate(s->a, s->a_size, "up", "a");
		}
	}
	if (s->b[0] == 0)
		swap("sb", s->b, s->b_size);
	if (s->a[2] != 4)
	{
		if (s->a[0] == 4)
			rotate(s->a, s->a_size, "up", "a");
		else
			rotate(s->a, s->a_size, "down", "a");
	}
	if (s->a[0] > s->a[1])
		swap("sa", s->a, s->a_size);
	push("pa", s);
	push("pa", s);
}

static void	radix_sort_stack_b(t_stacks *s, int b_size, int bit_size, int j)
{
	while (b_size-- && j <= bit_size && !is_array_sorted(s))
	{
		if (((s->b[0] >> j) & 1) == 0)
			rotate(s->b, s->b_size, "up", "b");
		else
			push("pa", s);
	}
	if (is_array_sorted(s))
		while (s->b_size != 0)
			push("pa", s);
}

void	radix_sort(t_stacks *s)
{
	int	j;
	int	bit_size;
	int	size;

	bit_size = 0;
	size = s->a_size;
	while (size > 1 && ++bit_size)
		size /= 2;
	j = -1;
	while (++j <= bit_size)
	{
		size = s->a_size;
		while (size-- && !is_array_sorted(s))
		{
			if (((s->a[0] >> j) & 1) == 0)
				push("pb", s);
			else
				rotate(s->a, s->a_size, "up", "a");
		}
		radix_sort_stack_b(s, s->b_size, bit_size, j + 1);
	}
	while (s->b_size != 0)
		push("pa", s);
}


void	create_index(t_stacks *s)
{
	int	i;
	int	j;
	int	k;
	int	*new_a;

	new_a = malloc(s->a_size * sizeof * new_a);
	if (new_a == NULL)
		free_and_exit_msg(s, "Error\n");
	i = -1;
	while (++i < s->a_size)
	{
		k = 0;
		j = -1;
		while(++j < s->a_size)
			if(s->a[i] > s->a[j])
				k++;
		new_a[i] = k;
	}
	i = s->a_size;
	while (i--)
		s->a[i] = new_a[i];
	free(new_a);
}

void    initialize_stacks(int argc, char **argv, t_stacks *s)
{
    int i;
    
    i = 0;
    s->a_size = 0;
    s->b_size = 0;
    while(--argc)
    {
        if (ft_count_words(argv[i + 1], ' '))
            s->a_size += ft_count_words(argv[i + 1], ' ');
        else
            s->a_size++;
        i++;
    }
    s->a = malloc (s->a_size * sizeof * s->a);
    if (s->a == NULL)
        free_and_exit_msg(s, "Error\n");
    s->b = malloc (s->a_size * sizeof * s->b);
    if (s->b == NULL)
        free_and_exit_msg(s, "Error\n");
}

void    exit_if_dupes_or_sorted(t_stacks *s, int i)
{
    int j;

    j = 0;
    if (i == 0)
    {
        while(i < s->a_size)
        {
            j = i + 1;
            while (j < s->a_size)
            {
                if (s->a[i] == s->a[j])
                    free_and_exit_msg(s, "Error\n");
                j++;
            }
            i++;
        }
    }
    if (is_array_sorted(s))
		free_and_exit_msg(s, NULL);
}


void    parse_numbers(t_stacks *s)
{
    char    **temp;
    int     i;
    int     j;
    
    j = 0;
    temp = ft_split(s->join_args, ' ');
    i = 0;
    while(temp[i] != NULL && temp[i][0] != '\0')
    {
        s->a[j++] = ft_atol(temp[i++], s);
        free(temp[i - 1]);
    }
    free(temp);
}

int	ft_atol(const char *n, t_stacks *s)
{
	int			i;
	long		sign;
	long long	res;

	res = 0;
	sign = 1;
	i = 0;
	while (n[i] == ' ' || (n[i] >= '\t' && n[i] <= '\r'))
		i++;
	if ((n[i] == '+' || n[i] == '-'))
	{
		if (n[i] == '-')
			sign = -1;
		i++;
	}
	while (n[i])
	{
		if (res > 2147483647 || (res * sign) < -2147483648 || ft_strlen(n) > 11)
			free_and_exit_msg(s, "Error\n");
		if (!(n[i] >= '0' && n[i] <= '9'))
			free_and_exit_msg(s, "Error\n");
		res = res * 10 + (n[i++] - '0');
	}
	return ((int)(res * sign));
}